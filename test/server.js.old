const idapi = require('../')
const jwt = require('jsonwebtoken')
require('dotenv').config()

const server = async () => {
  // connect express app and mongo database
  await idapi.init({
    uri: process.env.URI,
    port: 5000,
  })

  // adding a custom middleware to parse the user token
  idapi.app.use((req, res, next) => { // idapi.app is the express app
    let token = req.cookies.Authorization || req.headers.authorization
    if (token) {
      jwt.verify(token, 'secret', (err, decoded) => {
        if (!err) req.myId = decoded.data.userId
      })
    }
    next()
  })

  // creating our authorizations functions (for routes)
  idapi.authorizations = {
    public: async () => true, // returning true if access is granted and false if not
    private: async (ctx) => Boolean(ctx.req.myId),
    admin: async (ctx) => {
      if (!ctx.req.myId) return false
      const user = await idapi.User.findOne({ _id: ctx.req.id, role: 'admin' })
      if (!user) return false
      return true
    },
  }

  // adding a model "User" with mongoose, check mongoose schema for the second argument
  const userSchema = idapi.schema('User', {
    email: {
      type: String,
      unique: true,
      required: true,
    },
    firstname: {
      type: String,
      required: true,
    },
    lastname: {
      type: String,
      required: true,
    },
    password: {
      type: String,
      required: true,
    },
    role: {
      type: String,
      enum: ['user', 'admin'],
      default: 'user',
    },
  })

  // the userSchema is a mongoose schema instance
  userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next()
    this.password = await bcrypt.hash(this.password, 8)
    next()
  })

  // adding a validator for our model (validation is used with pre('validate', ...) middleware from mongoose)
  idapi.validator('User', Joi => ({
    email: Joi.string()
        .email({ tlds: { allow: false } })
        .required(),
    firstname: Joi.string().max(30).min(1).required(),
    lastname: Joi.string().max(30).min(1).required(),
    role: Joi.string().valid('admin', 'user').required(),
  }))

  // create our mongoose model (important: don't do it before the validator)
  idapi.model('User')

  // generating our routes with pre-built methods: $post, $getMany, $get, $put, $delete + custom routes
  idapi.routes('User', [
    {
      route: '$post',
      access: 'public', // refering to our authorizations.public function
    },
    {
      route: '$getMany',
      access: async ctx => true, // can also be a function
      queryMiddleware: (query) => {
        query.select('-password')
      },
    },
    {
      route: '$get',
      access: 'admin',
    },
    {
      route: '$put',
      access: 'admin',
      before: (ctx) => (ctx.req.body.password = undefined), // before and after middlewares are available for every routes
    },
    {
      route: '$delete',
      access: 'admin',
    },
    {
      route: '/user/current',
      method: 'get',
      access: 'private',
      resolver: async ({ Model }) => {
        const user = await Model.findOne({ _id: ctx.req.myId })
        if (!user) throw { status: 404, message: 'Utilisateur introuvable' } // send the response with status as status and code as content
        return user // the returning value is sent in json with status code 200
      },
    },
    {
      route: '/user/token',
      method:'get',
      access: 'public',
      resolver: async ({ data }) => {
        const token = await generateToken(data)
        return token
      },
    },
    {
      route: '/user/password',
      method: 'put',
      access: 'private',
      resolver: async (ctx) => {
        const user = await ctx.Model.findOne({ _id })
        const match = await bcrypt.compare(password, user.password)
        if (match === false) {
          throw { status: 403, message: 'Mauvais mot de passe' }
        }
      },
    },
  ])
}

server()
